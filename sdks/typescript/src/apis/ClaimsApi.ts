/* tslint:disable */
/* eslint-disable */
/**
 * POW Cards API
 * API for creating and managing POW wallet cards with Solana authentication
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@passentry.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InitializeClaimProcess200Response,
  InitializeClaimProcess400Response,
  InitializeClaimProcess429Response,
  VerifySignatureAndCreatePass200Response,
  VerifySignatureAndCreatePass400Response,
  VerifySignatureAndCreatePass401Response,
  VerifySignatureAndCreatePass500Response,
  VerifySignatureAndCreatePassRequest,
} from '../models/index';
import {
    InitializeClaimProcess200ResponseFromJSON,
    InitializeClaimProcess200ResponseToJSON,
    InitializeClaimProcess400ResponseFromJSON,
    InitializeClaimProcess400ResponseToJSON,
    InitializeClaimProcess429ResponseFromJSON,
    InitializeClaimProcess429ResponseToJSON,
    VerifySignatureAndCreatePass200ResponseFromJSON,
    VerifySignatureAndCreatePass200ResponseToJSON,
    VerifySignatureAndCreatePass400ResponseFromJSON,
    VerifySignatureAndCreatePass400ResponseToJSON,
    VerifySignatureAndCreatePass401ResponseFromJSON,
    VerifySignatureAndCreatePass401ResponseToJSON,
    VerifySignatureAndCreatePass500ResponseFromJSON,
    VerifySignatureAndCreatePass500ResponseToJSON,
    VerifySignatureAndCreatePassRequestFromJSON,
    VerifySignatureAndCreatePassRequestToJSON,
} from '../models/index';

export interface InitializeClaimProcessRequest {
    publicKey: string;
}

export interface VerifySignatureAndCreatePassOperationRequest {
    verifySignatureAndCreatePassRequest: VerifySignatureAndCreatePassRequest;
}

/**
 * 
 */
export class ClaimsApi extends runtime.BaseAPI {

    /**
     * Generates a sign-in message that the user must sign to verify their identity using their Solana wallet. 
     * Initialize claim process
     */
    async initializeClaimProcessRaw(requestParameters: InitializeClaimProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InitializeClaimProcess200Response>> {
        if (requestParameters['publicKey'] == null) {
            throw new runtime.RequiredError(
                'publicKey',
                'Required parameter "publicKey" was null or undefined when calling initializeClaimProcess().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['publicKey'] != null) {
            queryParameters['publicKey'] = requestParameters['publicKey'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/claim/init`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InitializeClaimProcess200ResponseFromJSON(jsonValue));
    }

    /**
     * Generates a sign-in message that the user must sign to verify their identity using their Solana wallet. 
     * Initialize claim process
     */
    async initializeClaimProcess(requestParameters: InitializeClaimProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InitializeClaimProcess200Response> {
        const response = await this.initializeClaimProcessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verifies the signed message and creates a wallet pass if the signature is valid. 
     * Verify signature and create wallet pass
     */
    async verifySignatureAndCreatePassRaw(requestParameters: VerifySignatureAndCreatePassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifySignatureAndCreatePass200Response>> {
        if (requestParameters['verifySignatureAndCreatePassRequest'] == null) {
            throw new runtime.RequiredError(
                'verifySignatureAndCreatePassRequest',
                'Required parameter "verifySignatureAndCreatePassRequest" was null or undefined when calling verifySignatureAndCreatePass().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/claim/wallet-pass`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifySignatureAndCreatePassRequestToJSON(requestParameters['verifySignatureAndCreatePassRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifySignatureAndCreatePass200ResponseFromJSON(jsonValue));
    }

    /**
     * Verifies the signed message and creates a wallet pass if the signature is valid. 
     * Verify signature and create wallet pass
     */
    async verifySignatureAndCreatePass(requestParameters: VerifySignatureAndCreatePassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifySignatureAndCreatePass200Response> {
        const response = await this.verifySignatureAndCreatePassRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
